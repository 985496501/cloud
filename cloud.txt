各服务之间调用, 需要服务治理, 治理的前提, 需要服务注册, 服务发现


实现负载均衡： balanceLoader, 在我们微服务中内网负载均衡通常是在客户端做的
1. 服务端负载均衡, 比如nginx, 请求到了服务端了, 由我们的nginx分这个到那个服务实例上去
2. 客户端负载均衡, 这个就是在服务发送之前就已经知道我要去那个服务实例上去了

demo1: 我们自己手写一个balanceLoader也就自己玩玩
demo2:
Ribbon (带子)
是SpringCloud的一个负载均衡组件, 我们用它就行了 @LoadBalanced 在我
们创建的哪个客户端上加, 就给这个客户端的负载能力

Feign: 伪客户端  feign(正式说的 伪装, 假装自己是个客户端)
这个是我们上面的结合体，实现了一个带有负载均衡的客户端. 需要加入依赖, 有了它调用远程服务
就像调用本地服务一样了, hei hei. 给需要调服务的方创建一个feign客户端, 然后提供一个 远程服务端的接口.


Sentinel: 服务容错 sen ti nel (看门的人, 哨兵)
高并发带来的问题, 如果微服务之间调用的时候, 其中一个服务废了, 那么这个调用就会延迟,
如果这时候有其他更多的服务都来了, 那么任务堆积, 最终服务瘫痪. 所以需要保证服务的 可用性.
模拟调用其他服务出现了网络延迟怎么办. 就是常说的一个应用的接口的运行速度慢, 接口超时. Read timed out.








